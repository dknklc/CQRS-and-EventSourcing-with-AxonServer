package com.dekankilic.cqrswithaxonserver.command.aggregate;

import com.dekankilic.cqrswithaxonserver.command.command.CreateAccountCommand;
import com.dekankilic.cqrswithaxonserver.command.command.DepositMoneyCommand;
import com.dekankilic.cqrswithaxonserver.command.command.WithdrawMoneyCommand;
import com.dekankilic.cqrswithaxonserver.common.event.AccountActivatedEvent;
import com.dekankilic.cqrswithaxonserver.common.event.AccountCreatedEvent;
import com.dekankilic.cqrswithaxonserver.common.event.AccountCreditedEvent;
import com.dekankilic.cqrswithaxonserver.common.event.AccountDebitedEvent;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.axonframework.commandhandling.CommandHandler;
import org.axonframework.eventsourcing.EventSourcingHandler;
import org.axonframework.modelling.command.AggregateIdentifier;
import org.axonframework.modelling.command.AggregateLifecycle;
import org.axonframework.spring.stereotype.Aggregate;

import java.math.BigDecimal;


@NoArgsConstructor // Axon needs this to properly apply events on an AccountAggregate instance
@Aggregate // to let axon know that this is an aggregate component
@Slf4j
public class AccountAggregate { // We hold the state of an account at a certain point in time

    @AggregateIdentifier // we can uniquely identify an instance of AccountAggregate
    private String accountId;

    private BigDecimal balance;
    private String status;


    /*
    * When we receive CreateAccountCommand, we need to apply an AccountCreatedEvent.To do that, let's use the aggregatelifecycle.apply() method and give a new instance of the event
    * we intend to apply which is the AccountCreatedEvent. When you call the apply method, the event gets persisted into the event store and the event store dispatches this event over
    * to the query side for further handling like actually saving the new account to the database.
    *
    * */
    @CommandHandler // let Axon know that this constructor is for handling CreateAccountCommands, and execute this code when it receives a command to create.
    public AccountAggregate(CreateAccountCommand createAccountCommand){
        log.info("CreateAccountCommand received.");

        AggregateLifecycle.apply(new AccountCreatedEvent(createAccountCommand.getId(), createAccountCommand.getBalance()));
    }


    /*
    * Since we applied an AccountCreatedEvent on the aggregate whenever we handle a CreateAccountCommand, we also need to handle that event.
    * We do that by writing another method with the event we want to handle as a parameter.
    *
    * */
    @EventSourcingHandler // to let Axon know that this method is a handler for an event generated by AccountAggregate.
    public void on(AccountCreatedEvent accountCreatedEvent){
        log.info("An AccountCreatedEvent occurred.");
        this.accountId = accountCreatedEvent.getId(); // let's set the current state of the aggregate by updating the instance fields
        this.balance = accountCreatedEvent.getBalance();
        this.status = "CREATED";

        AggregateLifecycle.apply(new AccountActivatedEvent(this.accountId, "ACTIVATED"));
    }

    /*
    * We need to handle the event above : AccountActivatedEvent
    * */
    @EventSourcingHandler
    public void on(AccountActivatedEvent accountActivatedEvent){
        log.info("An AccountActivatedEvent occurred.");
        this.status = accountActivatedEvent.getStatus();
    }

    /******************************************************************************************************************/

    @CommandHandler
    public void on(DepositMoneyCommand depositMoneyCommand){
        log.info("DepositMoneyCommand received");

        AggregateLifecycle.apply(new AccountCreditedEvent(depositMoneyCommand.getId(), depositMoneyCommand.getAmount()));
    }

    @EventSourcingHandler
    public void on(AccountCreditedEvent accountCreditedEvent){
        log.info("AccountCreditedEvent occurred.");
        this.balance = this.balance.add(accountCreditedEvent.getAmount());
    }

    /******************************************************************************************************************/

    @CommandHandler
    public void on(WithdrawMoneyCommand withdrawMoneyCommand){
        log.info("WithdrawMoneyCommand received");

        AggregateLifecycle.apply(new AccountDebitedEvent(withdrawMoneyCommand.getId(), withdrawMoneyCommand.getAmount()));
    }

    @EventSourcingHandler
    public void on(AccountDebitedEvent accountDebitedEvent){
        log.info("AccountDebitedEvent occurred.");
        this.balance = this.balance.subtract(accountDebitedEvent.getAmount());
    }

}

/*
* How would those request that will be coming from RestAPI translate into commands?
* For this, we will need to spin up those commands ourselves as we receive those http requests using the CommandGateway.
* We do not want this to be autowired directly from our Rest Controller. Instead, we are going to call it from the service layer.
* */